/*
 * Candy Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// #include "cow.h"
import "C"
import (
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"unsafe"
)

const (
	CE = 10
	AA = 15
	NT = 17
	DE = 21
	YR = 23
)

// BuyCandy -
func BuyCandy(c *gin.Context) {
	var input BuyCandyRequest
	if err := c.BindJSON(&input); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, BuyCandy400Response{Error: err.Error()})
		return
	}
	if err := checkinput(input); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, BuyCandy400Response{Error: err.Error()})
		return
	}
	change := input.Money - (input.CandyCount * selectPriceCandyType(input.CandyType))
	if change < 0 {
		changestr := fmt.Sprintf("You need %v more money!", change*(-1))
		c.AbortWithStatusJSON(http.StatusPaymentRequired, BuyCandy400Response{Error: changestr})
		return
	}
	phrase := "Thank you!"
	cPhrase := C.CString(phrase)
	result := C.ask_cow(cPhrase)
	c.JSON(http.StatusCreated, BuyCandy201Response{Change: change, Thanks: C.GoString(result)})
	C.free(unsafe.Pointer(result))
}

func checkinput(input BuyCandyRequest) error {
	if input.Money <= 0 {
		return errors.New("incorrectly filled 'Money'")
	}
	if input.CandyCount <= 0 {
		return errors.New("incorrectly filled 'CandyCount'")
	}
	switch input.CandyType {
	case "CE", "AA", "NT", "DE", "YR":
	default:
		return errors.New("incorrectly filled 'CandyType'")
	}
	return nil
}

func selectPriceCandyType(candytype string) int32 {
	switch candytype {
	case "CE":
		return CE
	case "AA":
		return AA
	case "NT":
		return NT
	case "DE":
		return DE
	case "YR":
		return YR
	}
	return 0
}
